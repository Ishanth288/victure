
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://aysdilfgxlyuplikmmdt.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImF5c2RpbGZneGx5dXBsaWttbWR0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDAxNjU0NTAsImV4cCI6MjA1NTc0MTQ1MH0.7OLDoAC5i8F6IbORW7kY6at5pWdTZDB44D0g6kPaWpA";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true,
    storage: localStorage
  },
  global: {
    headers: {
      'X-Client-Info': 'victure-pharmacy-web',
    },
  }
});

// Add custom fetch options as a wrapper function to handle CORS issues
export const fetchWithOptions = async (url: string, options?: RequestInit) => {
  // Log fetch attempts in development to help debug connection issues
  if (process.env.NODE_ENV === 'development') {
    console.log('Supabase fetch:', url);
  }
  
  return fetch(url, {
    ...options,
    // Add cache control headers to prevent caching issues
    headers: {
      ...options?.headers,
      'Cache-Control': 'no-cache, no-store, must-revalidate',
      'Pragma': 'no-cache',
      'Expires': '0'
    }
  });
};

// Export security-enhanced version of auth state change
export const onAuthStateChange = (callback: (session: any) => void) => {
  const { data } = supabase.auth.onAuthStateChange((event, session) => {
    if (event === 'SIGNED_IN' || event === 'TOKEN_REFRESHED') {
      console.log('User authenticated with secure session');
    }
    callback(session);
  });
  
  return data;
};

// Helper method to safely handle Supabase query results
export const handleQueryResult = <T>(result: T | { error: true }) => {
  if (result && typeof result === 'object' && 'error' in result && result.error === true) {
    console.error("Supabase query error:", result);
    return null;
  }
  return result as T;
};

// Add a connection status check for debugging
export const checkSupabaseConnection = async () => {
  try {
    // Use the type-safe approach
    const { data, error } = await supabase.from('profiles').select('count', { count: 'exact', head: true });
    if (error) {
      console.error('Supabase connection test failed:', error);
      return false;
    }
    console.log('Supabase connection test successful');
    return true;
  } catch (e) {
    console.error('Supabase connection test exception:', e);
    return false;
  }
};
